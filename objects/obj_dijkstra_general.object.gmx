<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>7</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>contact[0, 0] = 0;      //contact - - an array of connections length
number_node = 0;        //number_node - number of nodes
D[0] = 0;               //D - current distance from node to start node.
node_x[0] = 0;          //node_x/y array of coordinates of nodes
node_y[0] = 0;

//We need load graph which was created and saved in room r_matrix_create.
//Be sure what it was done.
dijkstra_load_graph("path_matrix.txt");

//This function must be called, after loading graph.
//It calculate and set distance.
dijkstra_set_start_data();

//Creating object who walk. It isn't necessary.
instance_create(node_x[0], node_y[0], obj_voyager);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Here is choice of goal position.
var st, fn, sc, fc;
st = instance_nearest(obj_voyager.x, obj_voyager.y, obj_dijkstra_node);
fn = instance_nearest(mouse_x, mouse_y, obj_dijkstra_node);

sc = st.myid;
fc = fn.myid;

//Ok. This is most important part.
//sc and fc are positions start and finish nodes.
//Positions in node_x/y arrays.
//For example if you use numbers 0 and 3, program will find nodes on position 0 and 3
//and will create path between it.
p_base = dijkstra_path_find(sc, fc);

//Path adjustment and setting up it to voyager
path_set_kind(p_base, 1);
path_set_closed(p_base, 0);
with (obj_voyager)
{
    path_start(obj_dijkstra_general.p_base, 3, 0, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing which can be delete.
for (i = 0; i &lt; number_node; i+=1)
{
    for (j = 0; j &lt; number_node; j+=1)
    {
        if ((contact[i,j] &gt; 0) &amp;&amp; (contact[i,j] &lt; 64000))
        {
            draw_set_color(c_black);
            draw_line(node_x[i], node_y[i], node_x[j], node_y[j]);
            //draw_set_color(c_blue);                     
            //draw_text((node_x[i] + node_x[j]) / 2, (node_y[i] + node_y[j]) / 2 - 20, "lgth " + string(round(contact[i, j])));
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
